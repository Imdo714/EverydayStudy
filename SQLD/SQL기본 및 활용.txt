DB : 특정 기업이나 조직 또는 개인이 필요에 의해 데이터를 일정한 형태로 저장해 놓은 것을 의미한다

DBMS : 효율적인 데이터 관리 뿐만 아니라 예기치 못한 사건으로 인한 데이터의 손상을 피하고 필요시, 필요한 데이터를 복구하기 위한 강력한 기능의 SW

SQL : DB 관계형 에서 데이터 정의 조작 제어를 , 위해 사용하는 언어

- DML : SELECT, INSERT, UPDATE, DELETE
- DDL : CREATE, ALTER, DROP, RENAME
- DCL : GRANT, REVOKE
- TCL : COMMIT, ROLLBACK, SAVEPOINT

정규화 : 데이터의 정합성 확보와 데이터 입력 수정 삭제시 발생할 수 있는 이상현상을 방지하기 위해 중복 제거

연산자의 종류
- BETWEEN a AND b : a b 와 값 사이에 있으면 됨
- IN (list) : 리스트에 있는 값중 어느 하나라도 일치
- IS NULL : NULL 값인 경우 (Oracle은 VARCHAR2 빈 문자열을 NULL로 판단)
- IS NOT NULL : NULL 값이 아닌 경우
- NOT IN (list) : list의 값과 일치하지 않는다
- LIKE ‘비교문자열’ : 비교문자열과 형태가 일치

SELECT PLAYER_NAME FROM PLAYER 선수명 
WHERE TEAM_ID = ‘K2’; -> ID가 K2 팀 인 사람
WHERE TEAM_ID IN (‘K2’,‘K7’); -> K2,K7인 사람
WHERE HEIGHT BETWEEN 170 AND 180; -> 키가 170 ~ 180인 사람
WHERE POSITION IS NULL; -> 포지션 없는 사람

NULL 값과의 수치연산은 NULL 값을 리턴한다.
NULL 값과의 비교연산은 거짓 를 (FALSE) 리턴한다.

연산자 우선순위 : ()->NOT-> 비교연산자->AND->OR

ROWNUM : 원하는 만큼의 행을 가져올 때 사용
SELECT * PLAYER_NAME FROM PLAYER
WHERE ROWNUM = 1;

문자형 함수
LOWER : 문자열을 소문자로
UPPER : 문자열을 대문자로
ASCII : ASCII 문자의 값 반환
CHR : ASCII 값에 해당하는 문자 반환
CONCAT : 문자열1, 2 를 연결
SUBSTR : 문자열 중 m위치에서 n개의 문자 반환
LENGTH : 문자열 길이를 숫자 값으로 반환

CONCAT(‘RDBMS’,‘ SQL’) -> ‘RDBMS SQL’
SUBSTR(‘SQL Expert’,5,3) -> ‘Exp’
LTRIM(‘xxxYYZZxYZ’,‘x’) -> ‘YYZZxYZ’
TRIM(‘x’ FROM ‘xxYYZZxYZxx’) -> ‘YYZZxYZ’

날짜형 함수
SYSDATE : 현재날짜와 시각 출력
EXTRACT : 날짜에서 데이터 출력
TO_NUMBER(TO_CHAR(d,‘YYYY’)) : 연도를 숫자로 출력
1 = 하루, 1/24 = 1시간, 1/24/60 = 1분

NULL 관련 함수 (NULL 0 ) 은 또는 공백 아님
- NVL(식1, 식2) : 식1의 값이 NULL 이면 식2 출력. 공집합을 바꿔주진 않음
- NULLIF(식1, 식2) : 식1이 식2 와 같으면 NULL을 표현 아니면 식1 을 출력
- COALESCE(식1, 식2) : NULL이 아닌 최초의표현식 모두 , NULL이면 NULL 반환
e.g. COALESCE(NULL, NULL, ‘abc’) -> ‘abc’

함수
COUNT(*) : NULL 포함 행의 수
COUNT( ) : NULL 표현식 제외 행의 수
SUM, AVG : NULL , 제외 합계 평균 연산
STDDEV : 표준 편차
VARIAN : 분산
MAX, MIN : , 최대값 최소값

GROUP BY, HAVING 절의 특징
1. GROUP BY 절을 통해 소그룹별 기준을 정한 후, SELECT 절에 집계 함수를 사용한다.
2. 집계 함수의 통계 정보는 NULL 값을 가진 행을 제외하고 수행한다.
3. GROUP BY ALIAS 절에서는 사용 불가
4. WHERE 집계 함수는 절에 올 수 없다.
5. HAVING 절에는 집계함수를 이용하여 조건 표시o
6. HAVING GROUP BY 절은 일반적으로 뒤에 위치

ORDER BY 특징
1. SQL 문장으로 조회된 데이터들을 다양한 목적에 맞게 특정한 칼럼을 기준으로 정렬하여 출력하는데 사용한다.
2. ORDER BY ALIAS 절에 칼럼명 대신 명이나 칼럼 순서를 나타내는 정수도 사용 가능하다.
3. DEFAULT (ASC) 값으로 오름차순 이 적용되며 DESC는 내림차순으로 정렬이 가능하다.
4. SQL 문장의 제일 마지막에 위치한다.
5. SELECT 절에서 정의하지 않은 칼럼 사용 가능

CASE WHEN : 표시할 열을 추가할때
CASE
	WHEN 조건1 THEN '이름1'
	WHEN 조건1 THEN '이름1'
	WHEN 조건1 THEN '이름1'
	ELSE '이름4' END AS 새로운 열 이름

SELECT 문장의 실행 순서
FROM - WHERE - GROUP BY - HAVING - SELECT - ORDER BY 

JOIN 특징
JOIN : 두 개 이상의 테이블들을 연결 또는 결합하여 데이터를 출력하는 것 일반적으로 행들은 PK FK 나 값의 연관에 의해 JOIN이 성립된다.
어떤 경우에는 PK, FK 관계가 없어도 논리적인 값들의 연관만으로 JOIN이 성립가능하다.

EQUI JOIN : 2개의 테이블 간에 칼럼 값들이 서로 정확하게 일치하는 경우에 사용 대부분 의 , PK, FK 관계를 기반으로 한다. 
조인 조건이 '=' 비교를 통해 같은 값을 가지는 행을 연결하여 결과를 얻는 조인 방법
SELECT 테이블1.컬럼, 테이블2.컬럼,
	FROM 테이블1, 테이블2
    WHERE 테이블1.컬럼 = 테이블2.컬럼;


NON EQUI JOIN : 2개의 테이블 간에 칼럼 값들이 서로 정확하게 일치하지 않는 경우에 사용 ‘=’연산자가 아닌  BETWEEN, >, <= 등 연산자 사용
SELECT E.ENAME, E.JOB, E.SAL, S.GRADE
FROM EMP E, SALGRADE S
WHERE E.SAL BETWEEN S.LOSAL AND S.HSAL;
위는 E의 SAL의 값을 S의 LOSAL과 HSAL 범위에서 찾는 것이다.

NATURAL JOIN : 조인조건 생략 시 두 테이불애 겉운 이름으로 자연 연결되는 조건 (컬럼명이 같을때)
CROSS JOIN : 조인조건 생력 시 두 테이블의 발생 가능한 모든 행을 출력하는 조인 
SELF JOIN : 하나의 테이블을 두 번 이상 참조하여 연결하는 조인 

ON절
연결한 두 컬럼명이 다른 경우 
JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID);

USING절 
연결할 두 컬럼명이 같은경우
JOIN JOB USING (JOB_CODE);


집합 연산자 : 두 개 이상의 테이블에서 조인을 사용하지 않고 연관된 데이터를 조회할 때 사용SELECT 절의 칼럼 수가 동일하고 SELECT 절의 동일 위치에 존재하는 칼럼의 데이터 타입이 상호호환할 때 사용 가능

일반 집합 연산자
1. UNION : ( 1 ) 합집합 중복 행 개로 정렬
2. UNION ALL : ( 합집합 중복 행도 표시 정렬 ) X
3. INTERSECT : ( 1 ) 교집합 중복 행 개로
4. MINUS : ( 1 ) 차집합 중복 행 개로
5. CROSS JOIN : (PRODUCT) 곱집합 ALIAS , 는 처음 테이블 정렬은 마지막 테이블 기준

순수 관계 연산자 : DB 관계형 를 새롭게 구현
1. SELECT -> WHERE절로 구현
2. PROJECT -> SELECT절로 구현
3. NATRUAL JOIN -> JOIN 다양한 으로 구현
4. DIVIDE -> x 사용
{a,x}{a,y}{a,z} divdie {x,z} = {a}

FROM JOIN 절 형태
1. INNER JOIN
2. NATURAL JOIN
3. USING 조건절
4. ON 조건절
5. CROSS JOIN
6. OUTER JOIN

INNER JOIN : JOIN 조건에서 동일한 값이 있는 행만 반환, USING이나 ON 절을 필수적으로 사용
NATURAL JOIN : 두 테이블 간의 동일한 이름을 갖는 모든 칼럼들에 대해 EQUI JOIN , 수행 NATURAL JOIN이 명시되면 추가로  USING, ON, WHERE 절에서 JOIN 조건을 정의할 수 없다, SQL Sever X
USING 조건절 : 같은 이름을 가진 칼럼들 중에서 원하는 칼럼에 대해서만 선택적으로 EQUI JOIN을 할 수 있다, JOIN 칼럼에 대해서 ALIAS나 테이블 이름과 같은 접두사를 붙일 수 없다 지원 , SQL Server x
ON 조건절 : ON조건절과 WHERE 조건절을 분리하여 이해가 쉬우며 칼럼명이 다르더라도, JOIN조건을 사용할 수 있는 장점이 있다, ALIAS나 테이블명 반드시 사용
CROSS JOIN = 카티시안 곱 : 양쪽 집합의 M*N건의 데이터 조합이 발생한다.
OUTER JOIN (LEFT, RIGHT, FULL) : JOIN 조건에서 동일한 값이 없는 행도 반환 가능하다, USING이나 ON 조건절 반드시 사용해야 함. SQL식에서 (+) 안붙은 쪽으로 JOIN한다.
- LEFT OUTER JOIN : 먼저 표기된 좌측 테이블에 해당하는 데이터를 읽은 후 나중 표기된 우측 ,테이블에서 JOIN 대상 데이터를 읽어 온다. 우측 값에서 같은 값이 없는 경우 NULL 값으로 채운다.
- RIGHT OUTER JOIN : LEFT OUTER JOIN의 반대
- FULL OUTER JOIN : 좌우측 테이블의 모든 데이터를 읽어 JOIN하여 결과를 생성한다. 중복 데이터는 삭제한다.


계층형 질의 : 테이블에 계층형 데이터가 존재하는 경우 데이터를 조회하기 위해 사용

START WITH : 계층 구조 전개의 시작 위치 지정
CONNECT BY : 다음에 전개될 자식 데이터 지정
PRIOR : CONNECT BY 절에 사용되며 현재 읽은 칼럼을 지정한다. PRIOR 자식 = 부토 형태를 사용하면 계층 구조에서 부모 데이터에 자식 데이터(브모 -> 자식) 방향으로 전개하는 순방향 전개를 한다. 반대는 역뱡향 전개
NOCYCLE : 동일한 데이터가 전개되지 않음
ORDER SIBLINGS BY : 형제 노드간의 정렬 수행
WHERE : 모든 전개를 수행한 후에 지정된 조건을 만족하는 데이터만 추출한다 (필터링)

LEVEL : 루트 데이터이면 1그 하위 데이터면 2, 리프 데이터까지 1씩 증가
CONNECT_BY_ISLEAF : 해당 데이터가 리프 데이터면1 그렇지 않으면 0
CONNECT_BY_ISCYCLE : 해당 데이터가 조상이면1 아니면 0 (CYCLE 아니면 옵션 사용했을 시만 사용 가능)
SYS_CONNECT_BY_PATH : 루트 데이터부터 현재 전개할 데이터까지의 경로를 표시한다.
CONNECT_BY_ROOT : 현재 전개할 데이터의 루트 데이터를 표시한다. 단항 연산자이다.
